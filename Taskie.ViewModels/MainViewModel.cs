using System;
using System.Collections.ObjectModel;
using System.IO.Abstractions;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using CommunityToolkit.Mvvm.Messaging;
using Taskie.Services;

namespace Taskie.ViewModels;

public partial class MainViewModel : ObservableObject, IRecipient<RemoveTaskListViewModelMessage>
{
    private readonly IFileSystem _fileSystem;
    private readonly ISettingsService _settingsService;

    /// <summary>
    /// The maximum allowed amount of lists for a non-pro instance.
    /// </summary>
    public const int MaxNonProListCount = 3;

    /// <summary>
    /// The current task lists.
    /// </summary>
    public ObservableCollection<TaskListViewModel> TaskListViewModels { get; } = [];

    /// <summary>
    /// Whether a new list can be created.
    /// </summary>
    public bool CanCreateList => _settingsService.IsPro || TaskListViewModels.Count < MaxNonProListCount;

    public MainViewModel(IFileSystem fileSystem, ISettingsService settingsService)
    {
        _fileSystem = fileSystem;
        _settingsService = settingsService;

        void OnListChanged(object _, object __)
        {
            OnPropertyChanged(nameof(CanCreateList));
            CreateListCommand.NotifyCanExecuteChanged();
        }

        _settingsService.Changed += OnListChanged;
        TaskListViewModels.CollectionChanged += OnListChanged;
        
        WeakReferenceMessenger.Default.RegisterAll(this);
    }

    #region Commands

    /// <summary>
    /// Creates a new list with an autogenerated name.
    /// </summary>
    [RelayCommand(CanExecute = nameof(CanCreateList))]
    private void CreateList()
    {
        var taskListViewModel = new TaskListViewModel
        {
            Guid = Guid.NewGuid(),
            CreationDate = DateTime.Now,
            Name = GenerateUniqueListName(),
        };
        TaskListViewModels.Add(taskListViewModel);
    }

    #endregion

    #region Private Methods

    /// <summary>
    /// Generates a unique name for a list based on an ascending numeric sequence.
    /// </summary>
    private string GenerateUniqueListName()
    {
        return $"New List ({TaskListViewModels.Count})";
    }

    #endregion

    #region Messages

    public void Receive(RemoveTaskListViewModelMessage message)
    {
        TaskListViewModels.Remove(message.Value);
    }

    #endregion
}